//
// Copyright 2008 (C) Moriyoshi Koizumi. All rights reserved.
//
// This software is distributed under the Boost Software License, Version 1.0.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef MOZO_PHP_DETAIL_VALUE_HELPERS_HPP
#define MOZO_PHP_DETAIL_VALUE_HELPERS_HPP

#include <zend.h>
#include <boost/type_traits.hpp>

namespace mozo { namespace php { namespace detail {

template<typename Tval_, typename TisPOD_>
struct _value_dtor_fun {
    static void impl(Tval_* p) {}
};

template<typename Tval_>
struct _value_dtor_fun<Tval_, ::boost::false_type> {
    static void impl(Tval_* p) {
        p->~Tval_();
    }
};

template<typename Tval_>
struct value_dtor_fun
    : public _value_dtor_fun<Tval_, typename ::boost::is_pod<Tval_>::type > {
};

template<>
struct value_dtor_fun< ::zval> {
    static void impl(::zval* p) {
        zval_dtor_wrapper(p);
    }
};

template<>
struct value_dtor_fun< ::zval*> {
    static void impl(::zval** p) {
        zval_ptr_dtor_wrapper(p);
    }
};

template<typename Tval_, typename TisPOD_>
struct _value_copy_ctor_fun {
    static void impl(Tval_* p, const Tval_& that) {
    }
};

template<typename Tval_>
struct _value_copy_ctor_fun<Tval_, ::boost::false_type> {
    static void impl(Tval_* p, const Tval_& that) {
        new(p) Tval_(that);
    }
};

template<typename Tval_>
struct value_copy_ctor_fun
    : public _value_copy_ctor_fun<Tval_, typename ::boost::is_pod<Tval_>::type > {
};

template<>
struct value_copy_ctor_fun< ::zval> {
    static void impl(::zval* p, const ::zval& that) {
        zval_copy_ctor(p);
    }
};

} } } // namespace mozo::php::detail

#endif /* MOZO_PHP_DETAIL_VALUE_HELPERS_HPP */
