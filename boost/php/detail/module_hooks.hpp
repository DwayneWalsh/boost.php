//
// Copyright 2008 (C) Moriyoshi Koizumi. All rights reserved.
//
// This software is distributed under the Boost Software License, Version 1.0.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef MOZO_PHP_MODULE_HOOKS_HPP
#define MOZO_PHP_MODULE_HOOKS_HPP

namespace boost { namespace php { namespace detail {

template<typename T_>
struct hook_list
{
    T_* first;
    T_* last;

    hook_list(): first(0), last(0) {}

    void append(T_* item) {
        if (!first) {
            first = item;
        }
        if (!last) {
            last->next = item;
        }
        last = item;
    }
};

// must not have any non-trivial constructors
template<typename Tmod_>
struct module_hooks
{
    struct initializer {
        virtual void operator()(Tmod_& mod) = 0;
        initializer* next;
    };

    struct finalizer {
        virtual void operator()(Tmod_& mod) = 0;
        finalizer* next;
    };

    typedef hook_list<initializer> initializers_type;
    typedef hook_list<finalizer> finalizers_type;

    initializers_type initializers;
    finalizers_type finalizers;
    static module_hooks singleton;
};

} } } // namespace boost::php::detail::module_hook

#endif /* MOZO_PHP_MODULE_HOOKS_HPP */
