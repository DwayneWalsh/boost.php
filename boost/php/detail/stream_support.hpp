//
// Copyright 2008 (C) Moriyoshi Koizumi. All rights reserved.
//
// This software is distributed under the Boost Software License, Version 1.0.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef MOZO_PHP_DETAIL_STREAM_SUPPORT_HPP
#define MOZO_PHP_DETAIL_STREAM_SUPPORT_HPP

#include <ostream>
#include <boost/config.hpp>
#include <boost/php/value.hpp>

# if defined(BOOST_MSVC) && BOOST_WORKAROUND(BOOST_MSVC, < 1300 && __SGI_STL_PORT)
using ::std::basic_ostream;
template<class E, class T> basic_ostream<E, T>&
operator<<(::basic_ostream<E, T>& os, const ::boost::php::string::& p)
# else
template<class E, class T> ::std::basic_ostream<E, T>&
operator<<(::std::basic_ostream<E, T>& os, const ::boost::php::string& p)
# endif
{
    BOOST_ASSERT(p.data());
    os.write(p.data(), p.size());
    return os;
}

# if defined(BOOST_MSVC) && BOOST_WORKAROUND(BOOST_MSVC, < 1300 && __SGI_STL_PORT)
using ::std::basic_ostream;
template<class E, class T> basic_ostream<E, T>&
operator<<(::basic_ostream<E, T>& os, const ::zval& p)
# else
template<class E, class T> ::std::basic_ostream<E, T>&
operator<<(::std::basic_ostream<E, T>& os, const ::zval& p)
# endif
{
    if (p.type == ::boost::php::value::_STRING) {
        os << static_cast<const ::boost::php::string&>(
                reinterpret_cast<const ::boost::php::value&>(p));
    } else {
        os << static_cast<const ::boost::php::string&>(
                ::boost::php::value(
                    reinterpret_cast<const ::boost::php::value&>(p),
                    ::boost::php::value::_STRING));
    }
    return os;
}

# if defined(BOOST_MSVC) && BOOST_WORKAROUND(BOOST_MSVC, < 1300 && __SGI_STL_PORT)
using ::std::basic_ostream;
template<class E, class T> basic_ostream<E, T>&
operator<<(::basic_ostream<E, T>& os, const ::boost::php::value_ptr& p)
# else
template<class E, class T> ::std::basic_ostream<E, T>&
operator<<(::std::basic_ostream<E, T>& os, const ::boost::php::value_ptr& p)
# endif
{
    os << (*p);
    return os;
}

#endif /* MOZO_PHP_DETAIL_STREAM_SUPPORT_HPP */
