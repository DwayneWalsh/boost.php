//
// Copyright 2008 (C) Moriyoshi Koizumi. All rights reserved.
//
// This software is distributed under the Boost Software License, Version 1.0.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef MOZO_PHP_DETAIL_NATIVE_FUN_PROXY_HPP
#define MOZO_PHP_DETAIL_NATIVE_FUN_PROXY_HPP

#include <cstddef>
#include <stdexcept>
#include <boost/mpl/vector.hpp>
#include <boost/preprocessor/cat.hpp>
#include <boost/preprocessor/config/limits.hpp>
#include <boost/preprocessor/repetition/repeat.hpp>
#include <boost/preprocessor/repetition/repeat_from_to.hpp>
#include <boost/preprocessor/repetition/enum_params.hpp>
#include <boost/preprocessor/repetition/enum_trailing_params.hpp>

#include <mozo/php/detail/signature.hpp>
#include <mozo/php/detail/object_retriever.hpp>

#include <zend.h>
#include <zend_execute.h>

namespace mozo { namespace php { namespace detail {

class native_fun_proxy_base {
public:
    virtual ~native_fun_proxy_base() {}

    virtual void operator()(INTERNAL_FUNCTION_PARAMETERS) {
    }
};

template<typename Tsig_, typename Toretr_, typename Tretval_ = typename Tsig_::return_value_type, ::std::size_t Narity_ = Tsig_::arity_value::value>
class native_fun_proxy: public native_fun_proxy_base {
public:
    native_fun_proxy(typename Tsig_::function_type, const Toretr_&) {}
};

#define __MOZO_PHP_NATIVE_FUN_PROXY_CONV_TPL(__z__, __idx__, __var__) \
    , to_native< typename ::boost::mpl::at<typename Tsig_::arguments, typename ::boost::mpl::int_<__idx__> >::type >(value_ptr(params[__idx__]) TSRMLS_CC)

#define __MOZO_PHP_NATIVE_FUN_PROXY_INVOCATION_TPL(__z__, __arity__, __obj__) \
    fun_(__obj__ BOOST_PP_REPEAT_##__z__(__arity__, __MOZO_PHP_NATIVE_FUN_PROXY_CONV_TPL, _)) \

#define __MOZO_PHP_NATIVE_FUN_PROXY_VOID_INVOCATION_TPL(__z__, __arity__, __obj__) \
    __MOZO_PHP_NATIVE_FUN_PROXY_INVOCATION_TPL(__z__, __arity__, __obj__)

#define __MOZO_PHP_NATIVE_FUN_PROXY_NONVOID_INVOCATION_TPL(__z__, __arity__, __obj__) \
    reinterpret_cast<value*>(return_value)->swap(*to_value_ptr(__MOZO_PHP_NATIVE_FUN_PROXY_INVOCATION_TPL(__z__, __arity__, __obj__) TSRMLS_CC));

#if ZEND_MODULE_API_NO < 20071006
#define __MOZO_PHP_NATIVE_FUN_PROXY_BODY_TPL(__z__, __arity__, __var__, __invoke__) \
    public: \
        native_fun_proxy(typename Tsig_::function_type const& fun, \
                const Toretr_& oretr) \
                : fun_(fun), oretr_(oretr) {} \
        virtual ~native_fun_proxy() {} \
        virtual void operator()(INTERNAL_FUNCTION_PARAMETERS) { \
            typename Tsig_::object_type* obj = oretr_( \
                    INTERNAL_FUNCTION_PARAM_PASSTHRU); \
            ::std::size_t arity = Tsig_::arity_value::value; \
            ::zend_uint num_params = *((zend_uint*)EG(argument_stack).top_element - 2); \
            if (num_params < arity) { \
                zend_error(E_WARNING, "too few arguments (expected %d, got %d)", arity, num_params); \
                return; \
            } \
            if (num_params > arity) { \
                zend_error(E_WARNING, "too many arguments (expected %d, got %d)", arity, num_params); \
                return; \
            } \
            zval** params = reinterpret_cast<zval**>( \
                    EG(argument_stack).top_element - 2 - num_params ); \
            try { \
                __invoke__(__z__, __arity__, obj); \
            } catch (const ::mozo::php::runtime_error& e) { \
                ::mozo::php::utils::print_error(E_WARNING, \
                        e.filename().c_str(), e.line_number(), e.what()); \
            } catch (const ::std::exception& e) { \
                zend_error(E_WARNING, "%s", e.what()); \
            } \
        } \
    public: \
        typename Tsig_::function_type fun_; \
        const Toretr_& oretr_;
#else
#define __MOZO_PHP_NATIVE_FUN_PROXY_BODY_TPL(__z__, __arity__, __var__, __invoke__) \
    public: \
        native_fun_proxy(typename Tsig_::function_type fun, \
                const Toretr_& oretr) \
                : fun_(fun), oretr_(oretr) {} \
        virtual ~native_fun_proxy() {} \
        virtual void operator()(INTERNAL_FUNCTION_PARAMETERS) { \
            typename Tsig_::object_type* obj = oretr_( \
                    INTERNAL_FUNCTION_PARAM_PASSTHRU); \
            ::std::size_t arity = Tsig_::arity_value::value; \
            ::zend_uint num_params = *((zend_uint*)EG(argument_stack)->top - 1); \
            if (num_params < arity) { \
                zend_error(E_WARNING, "too few arguments (expected %d, got %d)", arity, num_params); \
                return; \
            } \
            if (num_params > arity) { \
                zend_error(E_WARNING, "too many arguments (expected %d, got %d)", arity, num_params); \
                return; \
            } \
            zval** params = reinterpret_cast<zval**>( \
                    EG(argument_stack)->top - 1 - num_params ); \
            try { \
                __invoke__(__z__, __arity__, obj); \
            } catch (const ::mozo::php::runtime_error& e) { \
                ::mozo::php::utils::print_error(E_WARNING, \
                        e.filename().c_str(), e.line_number(), e.what()); \
            } catch (const ::std::exception& e) { \
                zend_error(E_WARNING, "%s", e.what()); \
            } \
        } \
    public: \
        typename Tsig_::function_type fun_; \
        const Toretr_& oretr_;
#endif /* ZEND_MODULE_API_NO < 20071006 */

#define __MOZO_PHP_NATIVE_FUN_PROXY_TPL(__z__, __arity__, __var__) \
    template<typename Tsig_, typename Toretr_, typename Tretval_> \
    class native_fun_proxy<Tsig_, Toretr_, Tretval_, __arity__>: public native_fun_proxy_base { \
    __MOZO_PHP_NATIVE_FUN_PROXY_BODY_TPL(__z__, __arity__, __var__, \
            __MOZO_PHP_NATIVE_FUN_PROXY_NONVOID_INVOCATION_TPL) \
    }; \
    template<typename Tsig_, typename Toretr_> \
    class native_fun_proxy<Tsig_, Toretr_, void, __arity__>: public native_fun_proxy_base { \
    __MOZO_PHP_NATIVE_FUN_PROXY_BODY_TPL(__z__, __arity__, __var__, \
            __MOZO_PHP_NATIVE_FUN_PROXY_VOID_INVOCATION_TPL) \
    };

BOOST_PP_REPEAT_FROM_TO(0, BOOST_MPL_LIMIT_VECTOR_SIZE, __MOZO_PHP_NATIVE_FUN_PROXY_TPL, _);

#undef __MOZO_PHP_NATIVE_FUN_PROXY_CONV_TPL
#undef __MOZO_PHP_NATIVE_FUN_PROXY_BODY_TPL
#undef __MOZO_PHP_NATIVE_FUN_PROXY_TPL
#undef __MOZO_PHP_NATIVE_FUN_PROXY_INVOCATION_TPL
#undef __MOZO_PHP_NATIVE_FUN_PROXY_NONVOID_INVOCATION_TPL
#undef __MOZO_PHP_NATIVE_FUN_PROXY_VOID_INVOCATION_TPL

template<typename Tsig_, typename Toretr_>
inline native_fun_proxy_base* create_native_fun_proxy(const Tsig_& sig, const Toretr_& oretr)
{
    return new native_fun_proxy<Tsig_, Toretr_>(sig.impl, oretr);
}


template<typename Tsig_>
inline native_fun_proxy_base* create_native_fun_proxy(const Tsig_& sig)
{
    return create_native_fun_proxy(sig, get_object_retriever(sig));
}

} } } // namespace mozo::php::detail

#endif /* MOZO_PHP_DETAIL_NATIVE_FUN_PROXY_HPP */
