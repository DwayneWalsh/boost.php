//
// Copyright 2008 (C) Moriyoshi Koizumi. All rights reserved.
//
// This software is distributed under the Boost Software License, Version 1.0.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef MOZO_PHP_DETAIL_ARG_INFO_FACTORY_HPP
#define MOZO_PHP_DETAIL_ARG_INFO_FACTORY_HPP

#include <cstddef>
#include <boost/mpl/vector.hpp>
#include <boost/mpl/at.hpp>
#include <boost/mpl/int.hpp>
#include <boost/preprocessor/cat.hpp>
#include <boost/preprocessor/config/limits.hpp>
#include <boost/preprocessor/repetition/repeat.hpp>
#include <boost/preprocessor/repetition/repeat_from_to.hpp>
#include <boost/preprocessor/repetition/enum_params.hpp>
#include <boost/preprocessor/repetition/enum_trailing_params.hpp>

#include <mozo/php/detail/signature.hpp>

#include <zend.h>

namespace mozo { namespace php { namespace detail {

template<typename T_>
struct mpl_should_pass_by_ref { 
    static const bool value = false;
};

template<typename T_>
struct mpl_get_class_name_for_type {
    static const char* value;
};

template<typename T_>
const char* mpl_get_class_name_for_type<T_>::value = 0;

template<typename T_>
struct concrete_arg_info_entry: public ::zend_arg_info {
    concrete_arg_info_entry() {
        name = 0;
        name_len = 0;
        typedef mpl_get_class_name_for_type<T_> mpl_class_name;
        class_name = const_cast<char*>(mpl_class_name::value);
        class_name_len = mpl_class_name::value ?
                ::strlen(mpl_class_name::value): 0;
        array_type_hint = 0;
        allow_null = 1;
        pass_by_reference = mpl_should_pass_by_ref<T_>::value;
        return_reference = 0;
        required_num_args = 0;
    }
};

template<typename Tsig_>
struct concrete_arg_info_header: public ::zend_arg_info {
    concrete_arg_info_header() {
        name = 0;
        name_len = 0;
        class_name = 0;
        class_name_len = 0;
        array_type_hint = 0;
        allow_null = 0;
        pass_by_reference = 0;
        return_reference = mpl_should_pass_by_ref<
            typename Tsig_::return_value_type >::value;
        required_num_args = 0;
    }
};

template< ::std::size_t Narity_>
struct concrete_arg_info_enclosure {
    template< typename Tsig_>
    struct arg_info {};
};

#define __MOZO_PHP_CONCRETE_ARG_INFO_ENTRY_TEMPLATE(__z__, __idx__, __var__) \
    concrete_arg_info_entry<\
            typename ::boost::mpl::at<typename Tsig_::arguments, \
                ::boost::mpl::int_<__idx__> >::type >\
        BOOST_PP_CAT(a, __idx__);

#define __MOZO_PHP_CONCRETE_ARG_INFO_TEMPLATE(__z__, __arity__, __var__) \
    template<> \
    template<typename Tsig_> \
    struct concrete_arg_info_enclosure<__arity__>::arg_info<Tsig_> { \
        concrete_arg_info_header<Tsig_> header; \
        BOOST_PP_REPEAT(__arity__, \
                __MOZO_PHP_CONCRETE_ARG_INFO_ENTRY_TEMPLATE, _) \
    };

BOOST_PP_REPEAT_FROM_TO(0, BOOST_MPL_LIMIT_VECTOR_SIZE, __MOZO_PHP_CONCRETE_ARG_INFO_TEMPLATE, _);

#undef __MOZO_PHP_CONCRETE_ARG_INFO_TEMPLATE
#undef __MOZO_PHP_CONCRETE_ARG_INFO_ENTRY_TEMPLATE

template<typename Tsig_>
zend_arg_info* create_arg_info(const Tsig_&)
{
    return reinterpret_cast<zend_arg_info *>(
            new typename concrete_arg_info_enclosure<Tsig_::arity_value::value >::template arg_info<Tsig_>());
}

} } } // namespace mozo::php::detail

#endif /* MOZO_PHP_DETAIL_ARG_INFO_FACTORY_HPP */
