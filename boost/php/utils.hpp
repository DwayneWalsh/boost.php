//
// Copyright 2008 (C) Moriyoshi Koizumi. All rights reserved.
//
// This software is distributed under the Boost Software License, Version 1.0.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef BOOST_PHP_UTILS_HPP
#define BOOST_PHP_UTILS_HPP

#include <string>
#include <cstddef>
#include <cstdarg>
#include <cstdlib>
#include <zend_compile.h>

namespace boost { namespace php { namespace utils {

static const char* current_filename();
static ::uint current_line_number();
static std::string
callable_name_to_string(const ::boost::php::value& callable_zv TSRMLS_DC);
static void
print_error(int type, const char* filename, ::uint lineno, const char* msg);
static void
print_errorf(int type, const char* filename, ::uint lineno, const char* format,
        ...);

} } } // namespace boost::php::utils

#include <boost/php/value.hpp>
#include "boost/php/exceptions.hpp"

namespace boost { namespace php { namespace utils {

static const char* current_filename()
{
    TSRMLS_FETCH();
    const char* retval(::zend_get_compiled_filename(TSRMLS_C));
    return retval ? retval: "Unknown";
}

static ::uint current_line_number()
{
    TSRMLS_FETCH();
    // WTF?
    return static_cast< ::uint>(::zend_get_compiled_lineno(TSRMLS_C));
}

static std::string
callable_name_to_string(const ::boost::php::value& callable_zv TSRMLS_DC)
{
    char* callable_name = 0;
    int callable_name_len = 0;

#if ZEND_MODULE_API_NO < 20071006
    if (!zend_is_callable_ex(&const_cast< ::boost::php::value&>(callable_zv),
            IS_CALLABLE_CHECK_SYNTAX_ONLY, &callable_name,
            &callable_name_len, NULL, NULL, NULL TSRMLS_CC)) {
        throw illegal_argument("specified object is not callable");
    }
#else
    char *_msg;
    if (!zend_is_callable_ex(&const_cast< ::boost::php::value&>(callable_zv),
            NULL, IS_CALLABLE_CHECK_SYNTAX_ONLY, &callable_name,
            &callable_name_len, NULL, &_msg TSRMLS_CC)) {
        std::string msg(_msg);
        throw illegal_argument(_msg);
    }
#endif /* ZEND_MODULE_API_NO < 20071006 */

    std::string retval(callable_name,
            static_cast< ::std::size_t>(callable_name_len));
    efree(callable_name);
    return retval;
}

static void
print_error(int type, const char* filename, ::uint lineno, const char* msg)
{
    print_errorf(type, filename, lineno, "%s", msg);
}

static void
print_errorf(int type, const char* filename, ::uint lineno, const char* format,
        ...)
{
    va_list ap;
    va_start(ap, format);
    zend_error_cb(type, filename, lineno, format, ap);
    va_end(ap);
}

} } } // namespace boost::php::utils

#endif /* BOOST_PHP_UTILS_HPP */
