//
// Copyright 2008 (C) Moriyoshi Koizumi. All rights reserved.
//
// This software is distributed under the Boost Software License, Version 1.0.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef BOOST_PHP_STRING_HPP
#define BOOST_PHP_STRING_HPP

#include <cstddef>
#include <cstring>
#include <string>
#include <boost/assert.hpp>
#include <zend.h>

namespace boost { namespace php {


class string {
public:
    string() {
        data_.str.val = 0;
        data_.str.len = 0;
    }

    string(char* val, ::std::size_t len = static_cast< ::std::size_t>(-1)) {
        if (len == static_cast< ::std::size_t>(-1)) {
            len = ::strlen(val);
        }
        BOOST_ASSERT(len <= static_cast< ::std::size_t >(::std::numeric_limits<int>::max()));
        data_.str.val = val;
        data_.str.len = static_cast<int>(len);
    }

    string(const char* val, ::std::size_t len = static_cast< ::std::size_t>(-1)) {
        if (len == static_cast< ::std::size_t>(-1)) {
            len = ::strlen(val);
        }
        BOOST_ASSERT(len <= static_cast< ::std::size_t >(::std::numeric_limits<int>::max()));
        data_.str.val = ::estrndup(val, len);
        data_.str.len = static_cast<int>(len);
    }

    string(::zvalue_value& data)
        : data_(data) {
    }

    string(const ::zvalue_value& data) {
        data_.str.val = ::estrndup(data.str.val, data.str.len);
        data_.str.len = data.str.len;
    }

    string(string& that) {
        data_ = that.data_;
    }

    string(const string& that) {
        data_.str.val = ::estrndup(that.data_.str.val, that.data_.str.len);
        data_.str.len = that.data_.str.len;
    }

    ::std::size_t size() const {
        BOOST_ASSERT(data_.str.len >= 0);
        return static_cast<int>(data_.str.len);
    }

    char* data() {
        return data_.str.val;
    }

    const char* data() const {
        return data_.str.val;
    }

    void release() {
        if (data_.str.val) {
            ::efree(data_.str.val);
            data_.str.val = 0;
            data_.str.len = 0;
        }
    }

    const string& operator=(const string& rhs) {
        string tmp(rhs);
        swap(*this);
        tmp.release();
        return *this;
    }

    void swap(string& that) {
        zvalue_value tmp = data_;
        data_ = that.data_;
        that.data_ = tmp;
    }

    operator char*() const {
        return data_.str.val;
    }

    operator const ::std::string() const {
        return ::std::string(data_.str.val, data_.str.len);
    }

    operator zvalue_value() const {
        return data_;
    }
private:
    ::zvalue_value data_;
};

} } // namespace boost::php

#endif /* BOOST_PHP_STRING_HPP */
